<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Day 2</title>
    <link href="/2022/07/06/my-first-blog/"/>
    <url>/2022/07/06/my-first-blog/</url>
    
    <content type="html"><![CDATA[<p>今天主要来学习Rust的基础，以及完成rustling的部分试题。</p><h2 id="不可变引用，可变引用及所有权"><a href="#不可变引用，可变引用及所有权" class="headerlink" title="不可变引用，可变引用及所有权"></a>不可变引用，可变引用及所有权</h2><p>不可变引用实际上是对栈中对应内存地址的引用，多个不可变用的生命周期可以相互重叠，共同使用：</p><p><img src="https://rust-book.junmajinlong.com/ch6/1633412142190.png"></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//打印变量地址</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">a</span>:<span class="hljs-type">i32</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>=<span class="hljs-string">&quot;asd&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span>=&amp;s;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span>=&amp;s1;<br>    <span class="hljs-comment">//&amp;a先转成raw指针，然后再把指针转成usize，这个可以print的</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">addr1</span> = &amp;a <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> <span class="hljs-type">i32</span> <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a addr：0x&#123;:X&#125;&quot;</span>,addr1);<br>    <span class="hljs-comment">//查看引用是否会指向同一地址</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s addr：0x&#123;:p&#125;&quot;</span>,s.<span class="hljs-title function_ invoke__">as_ptr</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s1 addr：0x&#123;:?&#125;&quot;</span>,s1.<span class="hljs-title function_ invoke__">as_ptr</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s2 addr：0x&#123;:p&#125;&quot;</span>,s2.<span class="hljs-title function_ invoke__">as_ptr</span>());<br>    <span class="hljs-comment">//为了验证刚才的地址是不是正确的，我们修改这个指针指向的数据</span><br>    a=a+<span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//打印a，可以看到a已经变成100了</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;value:&#123;&#125;\naddr：0x&#123;:X&#125;&quot;</span>,a,&amp;a <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> <span class="hljs-type">i32</span> <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">a addr：0x41D2AFF49C<br>s addr：0x0x7ff7e47ae458<br>s1 addr：0x0x7ff7e47ae458<br>s2 addr：0x0x7ff7e47ae458<br>value:7<br>addr：0x41D2AFF49C<br></code></pre></td></tr></table></figure><p>可变引用则在同一生命周期中只能存在一个，防止数据的不一致性，并且可以通过该引用对所指向的数据进行修改，修改后的。</p><p>而Rust所有权规则可以总结为如下几句话：</p><ol><li>Rust中的每个值都有一个被称为其所有者的变量(即：值的所有者是某个变量)</li><li>值在任一时刻有且只有一个所有者</li><li>当所有者(变量)离开作用域，这个值将被销毁</li></ol><h2 id="字符串String和字符串切片-amp-str"><a href="#字符串String和字符串切片-amp-str" class="headerlink" title="字符串String和字符串切片&amp;str"></a>字符串String和字符串切片&amp;str</h2><p><strong>Rust有两种字符串类型：str和String，其中str字符串是String类型字符串的切片(slice)类型</strong>。</p><p><img src="https://rust-book.junmajinlong.com/ch3/1608709804628.png"></p>]]></content>
    
    
    <categories>
      
      <category>Rust学习记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day 1</title>
    <link href="/2022/07/05/%E6%90%AD%E5%BB%BA%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/07/05/%E6%90%AD%E5%BB%BA%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>今天才正式开始关于rCore-Tutorial的相关学习，以下是今天完成的内容</p><h2 id="搭建运行环境"><a href="#搭建运行环境" class="headerlink" title="搭建运行环境"></a>搭建运行环境</h2><h3 id="安装WSL2（windows11）"><a href="#安装WSL2（windows11）" class="headerlink" title="安装WSL2（windows11）"></a>安装WSL2（windows11）</h3><p>在管理员 PowerShell 或 Windows 命令提示符中输入此命令（默认安装ubuntu）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --install<br></code></pre></td></tr></table></figure><p>等待安装完成后重启，打开ubuntu，设置用户名和密码，再使用以下指令更新和升级包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt upgrade<br></code></pre></td></tr></table></figure><p>等待更新的完成后，WSL就完成了配置。</p><h3 id="本地OS配置"><a href="#本地OS配置" class="headerlink" title="本地OS配置"></a>本地OS配置</h3><p>安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">安装：sudo apt-get install git<br>配置用户名：git config --global user.name xxx<br>配置邮箱地址：git config --global user.name xxx<br>查看是否配置成功：git config --list<br></code></pre></td></tr></table></figure><p>克隆git仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/LearningOS/lab0-0-setup-env-run-os1-xxxxx.git<br></code></pre></td></tr></table></figure><p>克隆时要个人访问令牌：在settings-&gt; Developer settings-&gt;Personal access tokens中新建一个人令牌，该令牌用作登录时的密码。</p><p>克隆完成后进到文件目录下（如果克隆速度太慢，可以使用cat &#x2F;etc&#x2F;resolv.conf来查看WSL的IP地址来设置相应的代理），使用vscode打开，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make codespaces_setenv<br></code></pre></td></tr></table></figure><p>等待一系列安装完成后，cd到os1文件夹下，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make run LOG=TRACE<br></code></pre></td></tr></table></figure><p>当出现以下结果后，配置完成：</p><p><img src="/img/uTools_1657160862863.png"></p>]]></content>
    
    
    <categories>
      
      <category>Rust学习记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
